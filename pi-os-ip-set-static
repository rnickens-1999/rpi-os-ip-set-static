#!/bin/bash

# Check if running on Raspberry Pi OS version 12 (Bookworm)
os_name=$(lsb_release -si)
os_version=$(lsb_release -sr)
os_codename=$(lsb_release -sc)

if [[ "$os_name" != "Debian" || "$os_version" != "12" || "$os_codename" != "bookworm" ]]; then
    echo "This script is intended to run on Raspberry Pi OS version 12 (Bookworm). Exiting."
    exit 1
fi

# Default configuration values
DEFAULT_GATEWAY="192.168.1.1"
DEFAULT_DNS="192.168.1.1"
DEFAULT_CONFIRM="no"

# Function to validate IP address format
validate_ip() {
    local ip=$1
    local valid_ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}(/([0-9]{1,2}))?$"
    if [[ $ip =~ $valid_ip_regex ]]; then
        return 0
    else
        return 1
    fi
}

# Function to validate DNS format (comma-separated list of up to three IPs)
validate_dns() {
    local dns=$1
    local valid_dns_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}(,([0-9]{1,3}\.){3}[0-9]{1,3}){0,2}$"
    if [[ $dns =~ $valid_dns_regex ]]; then
        return 0
    else
        return 1
    fi
}

# Echo the current date and time
echo "Current date and time: $(date)"

# Show current network configuration
echo "Current network configuration:"
nmcli -p connection show

# Prompt user for IP address
read -p "Enter the desired static IP address (e.g., 192.168.1.101/24): " ip_address

# Validate IP address format
if ! validate_ip "$ip_address"; then
    echo "Invalid IP address format. Exiting."
    exit 1
fi

# Set default gateway and allow user to change it
read -p "Enter the gateway [default: $DEFAULT_GATEWAY]: " gateway
gateway=${gateway:-$DEFAULT_GATEWAY}

# Validate gateway format
if ! validate_ip "$gateway"; then
    echo "Invalid gateway format. Exiting."
    exit 1
fi

# Set default DNS and allow user to change it
read -p "Enter the DNS [default: $DEFAULT_DNS]: " dns
dns=${dns:-$DEFAULT_DNS}

# Validate DNS format
if ! validate_dns "$dns"; then
    echo "Invalid DNS format. Exiting."
    exit 1
fi

# Show the user the final configuration before applying changes
echo "Final configuration:"
echo "IP Address: $ip_address"
echo "Gateway: $gateway"
echo "DNS: $dns"

# Prompt user to accept the configuration
read -p "Do you want to apply this configuration? (yes/no) [default: $DEFAULT_CONFIRM]: " confirm
confirm=${confirm:-$DEFAULT_CONFIRM}

if [ "$confirm" != "yes" ]; then
    echo "Configuration not applied. Current network configuration:"
    nmcli -p connection show
    exit 1
fi

# Apply the new network configuration
nmcli c mod "Wired connection 1" ipv4.addresses $ip_address ipv4.method manual
nmcli con mod "Wired connection 1" ipv4.gateway $gateway
nmcli con mod "Wired connection 1" ipv4.dns $dns

# Restart the network interface
nmcli c down "Wired connection 1" && sudo nmcli c up "Wired connection 1"

echo "" 
echo "Configuration applied. Current network configuration:"
echo "Current network configuration:"
echo "IP Address: $(nmcli -g ipv4.addresses connection show 'Wired connection 1')"
echo "MAC Address: $(nmcli -g GENERAL.HWADDR device show eth0 | tr '[:upper:]' '[:lower:]' | tr -d '\\')"
echo "Gateway: $(nmcli -g ipv4.gateway connection show 'Wired connection 1')"
echo "DNS: $(nmcli -g ipv4.dns connection show 'Wired connection 1')"